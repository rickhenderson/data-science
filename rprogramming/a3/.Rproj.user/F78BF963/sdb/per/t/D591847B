{
    "contents" : "# Functions for A3\n# RProgramming\n# Hospital Outcomes\n\n# The rankall function reads hospital data from the computer\n# and returns a 2-column data frame\n# containing the hospital in each state that has the ranking specied in num.\n# Note: Refer to Tables 11 and 19 in Hospital_Revised_Flatfiles.pdf\n\n\nrankall <- function(outcome, num = \"best\") {\n     ## Read outcome data\n     ## Check that state and outcome are valid\n     ## For each state, find the hospital of the given rank\n     ## Return a data frame with the hospital names and the\n     ## (abbreviated) state name\n     \n     ## Read outcome data\n     hospital_data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\")\n     \n     # Create a vector of valid outcomes\n     valid_outcomes <- c(\"heart attack\", \"heart failure\", \"pneumonia\")\n     \n     # Create a list of factors for valid rankings\n     num_factor <- factor(c(\"best\", \"worst\"))\n     \n     # Get the a unique list of states in the dataset\n     states <- unique(hospital_data[,7])\n     \n     # Using \"Risk Adjusted Rates\"\n     # Heart Attack - hospital_data[,11]\n     # Heart Failure - hospital_data[,17]\n     # Pneumonia - hospital_data[,23]\n     \n     # Set a column number for each of the outcomes\n     if (outcome == \"heart attack\") {\n          reqrd_col = 11\n     } else if (outcome == \"heart failure\") {\n          reqrd_col = 17\n     } else if (outcome == \"pneumonia\") {\n          reqrd_col = 23\n     }\n     \n     if (num == \"best\") {\n          num <- 1\n     }\n     \n     # Check to see if outcome is valid\n     if (!(outcome %in% valid_outcomes)) {\n          stop(\"invalid outcome\")\n     }\n     \n     # Check to see if num is valid\n     if (!(is.numeric(num))) {\n          if (!(num %in% num_factor)) {\n               stop(\"Could not find ranking value\")\n          }\n     }\n      # Determine the number of hospitals in the state\n     num_hospitals = nrow(hospital_data)\n     \n     # Return NA if the provided num argument is > the number of hospitals\n     if (is.numeric(num) && (num > num_hospitals)) {\n          return(NA)\n     }\n     \n     # Reduce the data frame to just important columns\n     # Converting to numeric will also convert the \"Not Available\" to NA.\n     df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = hospital_data[, reqrd_col])\n\n     # Sort the data\n     df <- sort_by_column_NA(df, 3) # This function takes care of NAs.\n     splitdf <- split(df, df$state)\n     \n     myordered<-lapply(splitdf,function(x) {x[order(x$outcome),]})\n     \n     for (i in 1:54){ \n               \n          }\n     \n     results = 77\n     return(results)\n     \n}\n\nsort_by_columns <- function (data, col1, col2) {\n     # From https://github.com/DanieleP/PA3-tutorial/blob/master/sortcolumns.md\n     # With changes\n     #usage: sorted_data <- sort_by_colmns(df, colnum1, colnum2)\n     orderdata <- data[order(data[, col1], data[, col2], decreasing = FALSE, na.last = NA),]\n     return(orderdata)\n}\n\nsort_by_column_NA <- function(data,column){\n     for (i in 3){\n          data[,i] <- suppressWarnings(as.numeric(levels(data[,i])[data[,i]]))\n     }\n     orderdata <- data[order(data[,column]),]\n     orderdata <- orderdata[complete.cases(orderdata),] \n     return(orderdata)\n}",
    "created" : 1438551927013.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1353081751",
    "id" : "D591847B",
    "lastKnownWriteTime" : 1438558027,
    "path" : "~/rprog/a3/rankall.R",
    "project_path" : "rankall.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "type" : "r_source"
}