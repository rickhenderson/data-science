{
    "contents" : "# Functions for A3\n# RProgramming\n# Hospital Outcomes\n\n# The rankhospital function reads hospital data from the computer\n# and returns a character vector with name of the hospital in the specified position\n# of ranking for the particular outcome\n# Note: Refer to Tables 11 and 19 in Hospital_Revised_Flatfiles.pdf\n\nrankhospital <- function(state, outcome, num = \"best\") {\n     ## Read outcome data\n     ## Check that state and outcome are valid\n     ## Return hospital name in that state with the given rank\n     ## 30-day death rate\n     \n     ## Read outcome data\n     hospital_data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\")\n     \n     # Create a vector of valid outcomes\n     valid_outcomes <- c(\"heart attack\", \"heart failure\", \"pneumonia\")\n     \n     # Create a list of factors for valid rankings\n     num_factor <- factor(c(\"best\", \"worst\"))\n     \n     # Using \"Risk Adjusted Rates\"\n     # Heart Attack - hospital_data[,11]\n     # Heart Failure - hospital_data[,17]\n     # Pneumonia - hospital_data[,23]\n     \n     ## Check that the state and outcome are valid\n     # Get the a unique list of states in the dataset\n     state_list <- unique(hospital_data[,7])\n     \n     # Check to see if given state name is valid\n     if (!(state %in% state_list)) {\n          stop(\"invalid state\")\n     }\n     \n     # Check to see if outcome is valid\n     if (!(outcome %in% valid_outcomes)) {\n          stop(\"invalid outcome\")\n     }\n     \n     # Check to see if num is valid\n     if (!(is.numeric(num))) {\n          if (!(num %in% num_factor)) {\n               stop(\"Could not find ranking value\")\n          }\n     }\n     \n     # Set a column number for each of the outcomes\n     if (outcome == \"heart attack\") {\n          reqrd_col = 11\n     } else if (outcome == \"heart failure\") {\n          reqrd_col = 17\n     } else if (outcome == \"pneumonia\") {\n          reqrd_col = 23\n     }\n     \n     # Subset the list to the required state and outcome AND valid measurement\n     df <- hospital_data[hospital_data$State == state, ]\n     \n     # Break the names out as a separate df\n     df_names <- df[, 2]\n     \n     # Change \"Not Available\" to NA\n     df[df == \"Not Available\"] <- NA\n     \n     # Convert the readings as numeric\n     df_outcomes <- as.numeric(df[,reqrd_col])\n     \n     # Combine them together\n     df <- data.frame(df_names, df_outcomes)\n\n     # Order by the outcome column then by name to control ties\n     df <- sort_by_columns(df, 2, 1)\n     \n     # Determine the number of hospitals in the state\n     num_hospitals = nrow(df)\n     \n     # Return NA if the provided num argument is > the number of hospitals\n     if (is.numeric(num) && (num > num_hospitals)) {\n          return(NA)\n     }\n     \n     if (is.numeric(num)) {\n          # Return just the hospital name for the required row since the data is sorted.\n          results <- df[num,1]\n     }\n     if (num == \"best\") {\n          # Return the name of the hospital with the best/lowest mortality rate\n          results <- df[1,1]\n     }\n     if (num == \"worst\") {\n          # Return the name of the hospital with the worst/highest mortality rate\n          results <- df[num_hospitals,1]\n     }\n     \n     # Output the results\n     return(as.character(results))\n}\n\nsort_by_columns <- function (data, col1, col2) {\n     # From https://github.com/DanieleP/PA3-tutorial/blob/master/sortcolumns.md\n     # With changes\n     #usage: sorted_data <- sort_by_colmns(df, colnum1, colnum2)\n     orderdata <- data[order(data[, col1], data[, col2], decreasing = FALSE, na.last = NA),]\n     return(orderdata)\n}",
    "created" : 1438309024514.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1269095640",
    "id" : "1D17AE71",
    "lastKnownWriteTime" : 1438549090,
    "path" : "~/rprog/a3/rankhospital.R",
    "project_path" : "rankhospital.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : true,
    "type" : "r_source"
}