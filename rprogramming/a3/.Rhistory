valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
# Create a list of factors for valid rankings
num_factor <- factor(c(1:5000, "best", "worst"))
# Using "Risk Adjusted Rates"
# Heart Attack - hospital_data[,11]
# Heart Failure - hospital_data[,17]
# Pneumonia - hospital_data[,23]
# Set a column number for each of the outcomes
if (outcome == "heart attack") {
reqrd_col = 11
} else if (outcome == "heart failure") {
reqrd_col = 17
} else if (outcome == "pneumonia") {
reqrd_col = 23
}
# Check to see if outcome is valid
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# Check to see if num is valid
if (!(is.numeric(num))) {
if (!(num %in% num_factor)) {
stop("Could not find ranking value")
}
}
# Determine the number of hospitals in the state
num_hospitals = nrow(df)
# Return NA if the provided num argument is > the number of hospitals
if (is.numeric(num) && (num > num_hospitals)) {
return("This should be NA")
}
if (is.numeric(num)) {
# Return just the hospital name for the required row since the data is sorted.
results <- df[num,1]
}
if (num == "best") {
# Return the name of the hospital with the best/lowest mortality rate
results <- df[1,1]
}
if (num == "worst") {
# Return the name of the hospital with the worst/highest mortality rate
results <- df[num_hospitals,1]
}
# Reduce the data frame to just important columns
df <- data.frame(hospital_data$Hospital.Name, hospital_data$State, as.numeric(hospital_data[, reqrd_col]))
# Change "Not Available" to NA
df[df == "Not Available"] <- NA
# Sort the data
df <- sort_by_columns(df, 3, 1) # This function takes care of NAs.
results <- data.frame(hospital = df[,1], state = df[,2])
# Output the results
return(results)
}
sort_by_columns <- function (data, col1, col2) {
# From https://github.com/DanieleP/PA3-tutorial/blob/master/sortcolumns.md
# With changes
#usage: sorted_data <- sort_by_colmns(df, colnum1, colnum2)
orderdata <- data[order(data[, col1], data[, col2], decreasing = FALSE, na.last = NA),]
return(orderdata)
}
remove(bad)
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
num_factor <- factor("best", "worst")
source('~/rprog/a3/rankall.R')
num_factor <- factor(c("best", "worst"))
reqrd_col = 23
source('~/rprog/a3/rankall.R')
num_hospitals = nrow(hospital_data)
df <- data.frame(hospital_data$Hospital.Name, hospital_data$State, as.numeric(hospital_data[, reqrd_col]))
df[df == "Not Available"] <- NA
df <- sort_by_columns(df, 3, 1) # This function takes care of NAs.
results <- data.frame(hospital = df[,1], state = df[,2])
head(results)
class(results)
rownames(results, results$state)
head(results)
rownames(results) <- results$state
row.names(results)<- results$state
?split
split(df, state)
head(df)
head(results)
split(results, results$state)
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
results <- split(results, results$state)
head(results)
str(results)
class(results)
lapply(results, min)
source('~/rprog/a3/rankall.R')
df <- split(df, df$hospital_data.State)
head(df,1)
lapply(df, mean)
lapply(df, mean, na.rm=TRUE)
exit
source('~/rprog/a3/rankall.R')
head(df)
head(resuts)
head(results)
class(results)
class(df)
?lapply
lapply(df, min)
head(df)
head(df,1)
lapply(df$AK[,3])
lapply(df$AK[,3], min)
names(df)
colnames(df)
class(df)
class(df$AK)
?unsplit
unsplit(df, 3)
class(df)
head(df,1)
names(df)
cls
remove(list = ls())
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
num_factor <- factor(c("best", "worst"))
reqrd_col = 11
df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = as.numeric(hospital_data[, reqrd_col]))
head(df)
source('~/rprog/a3/rankall.R')
sort_by_column_NA <- function(data,column){
for (i in 3:4){
data[,i] <- suppressWarnings(as.numeric(levels(data[,i])[data[,i]]))
}
orderdata <- data[order(data[,column]),]
orderdata <- orderdata[complete.cases(orderdata),]
return(orderdata)
}
sort_by_column_NA(df, 3)
head(df)
sort_by_column_NA(df, 3)
sort_by_column_NA <- function(data,column){
for (i in 3){
data[,i] <- suppressWarnings(as.numeric(levels(data[,i])[data[,i]]))
}
orderdata <- data[order(data[,column]),]
orderdata <- orderdata[complete.cases(orderdata),]
return(orderdata)
}
sort_by_column_NA(df, 3)
data <- read.csv(citiesNA.csv)
dir()
data <- read.csv("citiesNA.csv")
data
remove(data)
data
ls
ls()
remove(df)
remove(hospital_data)
source('~/rprog/a3/rankall_old.R')
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
reqrd_col = 23
num_hospitals = nrow(hospital_data)
df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = hospital_data[, reqrd_col])
head(df,1)
head(df)
class(df)
head(df, 100)
df <- sort_by_column_NA(df, 3)
head(df, 100)
head(df, 80)
df <- sort_by_columns(df, 3, 1)
results <- data.frame(hospital = df[,1], state = df[,2])
head(df, 80)
df$state
grep("AK", df$state)
df [grep("AL", df$state)]
df [grep("AL", df$state), ]
source('~/rprog/a3/rankhospital.R')
states <- levels[df, 2]
states <- levels(df[,2])
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
rankall("pneumonia", 4)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = hospital_data[, reqrd_col])
df <- sort_by_column_NA(df, 3)
df <- sort_by_columns(df, 3, 1)
results <- rank_by_state(df, outcome, num)
rank_by_state <- function(data,column,rank){
## We save the levels of column 2, the states' names, in the states vector
states <- levels(data[,2])
## We generate an empty vector that we will fill later, row by row, to generate our final output
output <- vector()
## For loop to get the right data on each hospital. length(states)
## is the number of different states in our
## database. In our case we have 54 states and regions.
for (i in 1:length(states)) {
## statedata subsets data by the considered state
statedata <- data [grep(states[i],data$state),]
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
## append() adds elements at the end of a vector. We want to add the name of the city [rank,1],
## the areakm2 [rank,2] and the populationk [rank,3]. We don't add the name of the countries, because it
## will be the label of the rows.
output <- append (output, as.character(orderdata[rank,1]))
for (l in 3){
output <- append (output, as.character(orderdata[rank,l]))
}
}
## Just because it's simpler to generate a matrix rather than a data frame, I generate it first and convert it
## to data frame immediatly after.
output <- as.data.frame(matrix(output,length(states),3, byrow = TRUE))
## Name of the columns will be "cities", "areakm2" and "populationk". Name of the rows are the countries.
colnames(output) <- c("hospital","outcome","rank")
rownames(output) <- states
return(output)
}
rankall("pneumonia", 4)
statedata <- data[grep(states[i], df$state)]
statedata <- data[grep(states[i], df$state]
for (i in 1:length(states)) {}
statedata <- data[grep(states[i], df$state]
for (i in 1:length(states)) {
statedata <- df[grep(states[i], df$state)]
}
for (i in 1:length(states)) {
statedata <- df[grep(states[i], df$state),]
}
statedata
for (i in 1:length(states)) {
## statedata subsets data by the considered state
statedata <- df [grep(states[i],df$state),]
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
## append() adds elements at the end of a vector. We want to add the name of the city [rank,1],
## the areakm2 [rank,2] and the populationk [rank,3]. We don't add the name of the countries, because it
## will be the label of the rows.
output <- append (output, as.character(orderdata[rank,1]))
for (l in 3){
output <- append (output, as.character(orderdata[rank,l]))
}
}
traceback()
column = 2
for (i in 1:length(states)) {
## statedata subsets data by the considered state
statedata <- df [grep(states[i],df$state),]
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
## append() adds elements at the end of a vector. We want to add the name of the city [rank,1],
## the areakm2 [rank,2] and the populationk [rank,3]. We don't add the name of the countries, because it
## will be the label of the rows.
output <- append (output, as.character(orderdata[rank,1]))
for (l in 3){
output <- append (output, as.character(orderdata[rank,l]))
}
}
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
rankall("pneumonia", 4)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
output <- vector()
for (i in 1:length(states)) {
## statedata subsets data by the considered state
statedata <- df [grep(states[i],df$state),]
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
## append() adds elements at the end of a vector. We want to add the name of the city [rank,1],
## the areakm2 [rank,2] and the populationk [rank,3]. We don't add the name of the countries, because it
## will be the label of the rows.
output <- append (output, as.character(orderdata[rank,1]))
for (l in 3){
output <- append (output, as.character(orderdata[rank,l]))
}
}
statedata
orderdata
source('~/rprog/a3/rankall.R')
for (i in 1:length(states)) {
## statedata subsets data by the considered state
statedata <- df [grep(states[i],df$state),]
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
## append() adds elements at the end of a vector. We want to add the name of the city [rank,1],
## the areakm2 [rank,2] and the populationk [rank,3]. We don't add the name of the countries, because it
## will be the label of the rows.
output <- append (output, as.character(orderdata[rank,1]))
for (l in 3){
output <- append (output, as.character(orderdata[rank,l]))
}
}
traceback()
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
statedata
orderdata <- statedata[order(decreasing = TRUE, statedata[,column]),]
output <- append (output, as.character(orderdata[rank,1]))
orderdata
output
orderdata[2,1]
debugSource('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
rank
debugSource('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
num
debugSource('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
statedata
statedata[, column]
column
debugSource('~/rprog/a3/rankall.R')
debugSource('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
rankall("pneumonia", 4)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 4)
head(rankall("pneumonia", 4))
tail(rankall("pneumonia", "worst"),3)
source('~/rprog/a3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
source('~/rprog/a3/rankall.R')
tail(rankall("pneumonia", "worst"),3)
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = hospital_data[, reqrd_col])
df
df <- sort_by_columns(df, 3, 1) # This function takes care of NAs.
df
debugSource('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
df <- sort_by_column_NA(df, 3) # This function takes care of NAs.
head(df, 3)
df <- split(df, df$state)
df
class(df)
source('~/rprog/a3/rankall_old.R')
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
source('~/rprog/a3/rankall_old.R')
tail(rankall_old("pneumonia", "worst"),3)
tail(rankall("pneumonia", "worst"),3)
submit()
ls()
dir()
source("submitscript3.R")
submit()
submit()
submit()
traceback
traceback()
class(df$state)
df
source('~/rprog/a3/rankall.R')
submit()
rename()
tail(rankall("pneumonia", "worst"),3)
rankall("pneumonia", "worst")
rankall("pneumonia", 5)
View(orderdata)
View(results)
View(statedata)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 5)
source('~/rprog/a3/rankall.R')
rankall("pneumonia", 5)
sumbit()
submit()
rankall("heart attack", 4)
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
submit()
submit()
rankall("heart attack", 4)
output <- as.data.frame(matrix(output,length(states),2, byrow = TRUE))
colnames(output) <- c("hospital","state")
rownames(output) <- states
head(output)
output <- append (output, as.character(orderdata[rank,1]))
head(output)
rankall("heart attack", 4)
source('~/rprog/a3/rankall_old.R')
rankall("heart attack", 4)
rankall_old("heart attack", 4)
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
source('~/rprog/a3/rankall_old.R')
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
data <- read.csv("citiesNA.csv")
dir()
setwd(PA3tutorialmaster)
data <- read.csv("citiesNA.csv")
head(data)
rank_by_country(data, 4, 1)
data <- sort_by_column_NA(data, 4)
rank_by_country(data, 4, 1)
data
rank_by_state(df, 2, 1)
df
rank_by_state(df, 2, 1)
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
df
source('~/rprog/a3/rankall_old.R')
source('~/rprog/a3/rankall_old.R')
source('~/rprog/a3/rankall_old.R')
source('~/rprog/a3/rankall_old.R')
rankall_old("heart attack", 4)
source('~/rprog/a3/rankall_new.R')
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
rankall("heart attack", 1)
source('~/rprog/a3/rankall.R')
rankall("heart attack", 1)
source('~/rprog/a3/rankall.R')
df
splitdf <- split(df, df$state)
class(df)
df <- data.frame(hospital = hospital_data$Hospital.Name, state = hospital_data$State, outcome = hospital_data[, reqrd_col])
df <- sort_by_column_NA(df, 3) # This function takes care of NAs.
splitdf <- split(df, df$state)
df
head(Df)
head(df)
splitdf <- split(df, df$state)
head(splitdf)
head(splitdf,1)
akdata <- splitdf[grep(states[1], splitdf$state)]
akdata <- splitdf[grep(states[1], splitdf$states[1])
]
akdate
akdata
akdata <- splitdf[grep(states[1], splitdf[1])
]
aldata
splitdf
splitdf[1]
splitdf[3]
nrow(splitdf[3])
length(splitdf[3])
head(splitdata[3])
head(splitdf[3])
head(splitdf[3],3)
head(splitdf[3][1:3])
head(splitdf[3])
class(splitdf[3])
length(splitdf[3]
)
ardf <- as.data.frame(splitdf[3])
ardf
ardf[1]
ardf[,1]
head(ardf, 1)
ardf[1]
ardf[1,1]
ardf[1:1]
str(ardf)
statedata
statedata[1,2]
statedata[1,1]
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
test <- rankall("heart attack", 4)
test
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
source('~/rprog/a3/rankall.R')
rankall("heart attack", 4)
head(rankall("heart attack", 4))
head(rankall("heart attack", 4),1)
source('~/rprog/a3/rankall.R')
test[1]
test[1][1]
[test[1]]
[test[1]]:1
test[1]$ak[ak$state]
test[1]$AK[AK$state]
test[1]$AK
class(test[1]$AK)
test[1]$AK[, 3]
source('~/rprog/a3/rankall.R')
source('~/rprog/a3/rankall.R')
